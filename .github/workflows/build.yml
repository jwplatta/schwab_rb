name: Package Gem

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.0

    - name: Install dependencies
      run: bundle install

    - name: Build the gem
      run: gem build schwab_rb.gemspec

    - name: Determine gem file name
      id: determine_gem_file
      run: echo "GEM_FILE=schwab_rb-$(ruby -r ./lib/schwab_rb/version -e 'puts SchwabRb::VERSION').gem" >> $GITHUB_ENV

    - name: Upload gem artifact
      uses: actions/upload-artifact@v3
      with:
        name: schwab_rb-gem
        path: ${{ env.GEM_FILE }}

    - name: Check if tag exists
      id: check_tag
      run: |
        if git show-ref --tags "refs/tags/main" --quiet; then
          echo "Tag exists"
          echo "TAG_EXISTS=true" >> $GITHUB_ENV
        else
          echo "Tag does not exist"
          echo "TAG_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Delete existing release
      if: env.TAG_EXISTS == 'true'
      run: |
        RELEASE_ID=$(curl -s \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} \
          | jq -r '.id')
        curl -s \
          -X DELETE \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID

    - name: Delete existing tag
      if: env.TAG_EXISTS == 'true'
      run: |
        git tag -d ${{ github.ref_name }}
        git push origin :refs/tags/${{ github.ref_name }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.GEM_FILE }}
        asset_name: ${{ env.GEM_FILE }}
        asset_content_type: application/octet-stream